@model EventSwift.Models.Event

@{
    ViewBag.Title = "Event Details";
    ViewBag.SkipNavbar = true;

    // Aggregate all approvals for all proposals under this event
    var allApprovals = Model.Proposals?.SelectMany(p => p.Approvals ?? new List<EventSwift.Models.ProposalApproval>()).ToList() ?? new List<EventSwift.Models.ProposalApproval>();

    // For each office, all proposals sent to that office must be approved
    var vpaaProposals = Model.Proposals.Where(p => p.TargetOfficeRole == "VPAA").ToList();
    var vpfProposals = Model.Proposals.Where(p => p.TargetOfficeRole == "VPF").ToList();
    var amiProposals = Model.Proposals.Where(p => p.TargetOfficeRole == "AMU").ToList();
    var vpaProposals = Model.Proposals.Where(p => p.TargetOfficeRole == "VPA").ToList();
    bool allVPAAApproved = vpaaProposals.Any() && vpaaProposals.All(p => p.Approvals.Any(a => a.Office == "VPAA" && a.Status == "Approved"));
    bool allVPFApproved = vpfProposals.Any() && vpfProposals.All(p => p.Approvals.Any(a => a.Office == "VPF" && a.Status == "Approved"));
    bool allAMIApproved = amiProposals.Any() && amiProposals.All(p => p.Approvals.Any(a => a.Office == "AMU" && a.Status == "Approved"));
    bool allVPAApproved = vpaProposals.Any() && vpaProposals.All(p => p.Approvals.Any(a => a.Office == "VPA" && a.Status == "Approved"));
    
    // Can send to President if all VPA approvals are completed
    var vpaApprovals = Model.Proposals?.SelectMany(p => p.Approvals ?? new List<EventSwift.Models.ProposalApproval>()).Where(a => a.Office == "VPA").ToList() ?? new List<EventSwift.Models.ProposalApproval>();
    bool canSendToPresident = vpaApprovals.Any() && vpaApprovals.All(a => a.Status == "Approved");
    
    // Get current user role
    var currentUserRole = "";
    if (User.Identity.IsAuthenticated)
    {
        using (var db = new EventSwift.Models.DefaultConnection())
        {
            var user = db.Users.FirstOrDefault(u => u.Username == User.Identity.Name);
            currentUserRole = user?.Role ?? "";
        }
    }
    bool isVPA = currentUserRole == "VPA";
}

<div class="d-flex">
    @Html.Partial("~/Views/Shared/_Sidebar.cshtml")
    <div class="flex-grow-1 p-2">
        @Html.Partial("~/Views/Shared/_Navbar.cshtml")

        @if (TempData["Error"] != null || TempData["Success"] != null)
        {
            <div aria-live="polite" aria-atomic="true" class="position-fixed top-0 end-0 p-3" style="z-index: 1080;">
                <div class="toast align-items-center text-bg-@(TempData["Error"] != null ? "danger" : "success") border-0 show" role="alert" id="feedbackToast">
                    <div class="d-flex">
                        <div class="toast-body">
                            @(TempData["Error"] ?? TempData["Success"])
                        </div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                </div>
            </div>
        }



        <div class="d-flex justify-content-between align-items-center mb-2">
            <a href="@Url.Action("Index", "EventProposals")" class="btn btn-link" style="color: var(--green); text-decoration: none; font-weight: 500;"><i class="bi bi-arrow-left me-1"></i> Back to My Events</a>
        </div>
        @Html.Partial("~/Views/Shared/_SectionHeader.cshtml", new ViewDataDictionary { { "Icon", "bi-calendar-event" }, { "Text", $"Event: {Model.Title}" }, { "Color", "var(--green)" }, { "Status", Model.Status } })

        <!-- Document Tracking Button -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <button type="button" class="btn btn-custom d-flex align-items-center gap-2" data-bs-toggle="modal" data-bs-target="#trackingModal">
                <i class="bi bi-file-earmark-check me-2"></i>Document Tracking
            </button>
            @if (Model.Status == "SentToPresident")
            {
                <span class="badge bg-warning text-dark">Sent to President</span>
            }
            else if (Model.Status == "ApprovedByPresident")
            {
                <span class="badge bg-success">Approved by President</span>
            }
        </div>

        <div>
            <h5 class="mb-2" style="color: var(--green); font-weight: 600;"><i class="bi bi-patch-check me-2"></i>Event Approval Status</h5>
            <div class="alert alert-info mb-3">
                <i class="bi bi-info-circle me-2"></i>
                <strong>New Approval Process:</strong> Documents can be sent directly to VPA or to VPAA/VPF/AMU (which then forward to VPA). VPA coordinates all documents before sending to the President.
            </div>
            <div class="d-flex align-items-center gap-3 mb-2">
                <span data-bs-toggle="tooltip" title="VPAA Approval">
                    <i class="bi bi-person-circle" style="color: @(allVPAAApproved ? "#28a745" : "#dc3545"); font-size: 1.5em;"></i>
                    <span class="ms-1">VPAA</span>
                    <i class="bi @(allVPAAApproved ? "bi-check-circle-fill text-success" : "bi-x-circle-fill text-danger") ms-1"></i>
                </span>
                <span data-bs-toggle="tooltip" title="VPF Approval">
                    <i class="bi bi-person-circle" style="color: @(allVPFApproved ? "#28a745" : "#dc3545"); font-size: 1.5em;"></i>
                    <span class="ms-1">VPF</span>
                    <i class="bi @(allVPFApproved ? "bi-check-circle-fill text-success" : "bi-x-circle-fill text-danger") ms-1"></i>
                </span>
                <span data-bs-toggle="tooltip" title="AMU Approval">
                            <i class="bi bi-person-circle" style="color: @(allAMIApproved ? "#28a745" : "#dc3545"); font-size: 1.5em;"></i>
                            <span class="ms-1">AMU</span>
                            <i class="bi @(allAMIApproved ? "bi-check-circle-fill text-success" : "bi-x-circle-fill text-danger") ms-1"></i>
                        </span>
                <span class="ms-2">
                    <i class="bi bi-arrow-right" style="color: var(--orange); font-size: 1.2em;"></i>
                        </span>
                <span data-bs-toggle="tooltip" title="VPA Approval">
                    <i class="bi bi-person-circle" style="color: @(allVPAApproved ? "#28a745" : "#dc3545"); font-size: 1.5em;"></i>
                    <span class="ms-1">VPA</span>
                    <i class="bi @(allVPAApproved ? "bi-check-circle-fill text-success" : "bi-x-circle-fill text-danger") ms-1"></i>
                </span>
                <span class="ms-2">
                    <i class="bi bi-arrow-right" style="color: var(--orange); font-size: 1.2em;"></i>
                </span>
                <span data-bs-toggle="tooltip" title="President Approval">
                    <i class="bi bi-person-circle" style="color: @(Model.Status == "ApprovedByPresident" ? "#28a745" : "#dc3545"); font-size: 1.5em;"></i>
                    <span class="ms-1">President</span>
                    <i class="bi @(Model.Status == "ApprovedByPresident" ? "bi-check-circle-fill text-success" : "bi-x-circle-fill text-danger") ms-1"></i>
                </span>
            </div>
            <div class="progress mb-3" style="height: 1.2rem;">
                @{
                    var approvalTotalSteps = 5; // VPAA, VPF, AMU, VPA, President
                    var approvalCompletedSteps = (allVPAAApproved ? 1 : 0) + (allVPFApproved ? 1 : 0) + (allAMIApproved ? 1 : 0) + (allVPAApproved ? 1 : 0) + (Model.Status == "ApprovedByPresident" ? 1 : 0);
                }
                <div class="progress-bar" role="progressbar" style="width: @(100 * approvalCompletedSteps / approvalTotalSteps)% ; background: var(--green);" aria-valuenow="@approvalCompletedSteps" aria-valuemin="0" aria-valuemax="@approvalTotalSteps">
                    @approvalCompletedSteps/@approvalTotalSteps Steps Completed
                </div>
            </div>
        </div>

        @if (Model.Status != "SentToPresident" && Model.Status != "ApprovedByPresident")
        {
            <div class="d-flex justify-content-between align-items-center mb-3">
                <button type="button" class="btn btn-custom d-flex align-items-center gap-2" data-bs-toggle="modal" data-bs-target="#createProposalModal">
                    <i class="bi bi-plus-circle"></i> Submit Document
                </button>
            </div>
        }
        else
        {
            <div class="alert alert-info mb-3">
                <i class="bi bi-info-circle me-2"></i>
                <strong>Document Creation Disabled:</strong> This event has been sent to the President for approval. No new documents can be created at this time.
            </div>
        }

        <hr />

        <h5 class="mb-3" style="color: var(--green); font-weight: 600;"><i class="bi bi-file-earmark-text me-2"></i>Documents</h5>

        @if (Model.Proposals != null && Model.Proposals.Any())
        {
            <div class="card shadow-sm border-0 mb-4">
                <div class="card-body p-0">
                    <table class="table table-hover align-middle mb-0">
                        <thead style="background: var(--light-yellow);">
                            <tr>
                                <th style="color: var(--green);">Title</th>
                                <th style="color: var(--green);">Status</th>
                                <th style="color: var(--green);">Submitted At</th>
                                <th style="color: var(--green);">Receiving Office</th>
                                <th style="color: var(--green);">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var proposal in Model.Proposals)
                            {
                                <tr>
                                    <td>@proposal.Title</td>
                                    <td>
                                        @if (proposal.Status == "Approved")
                                        {
                                            <span class="badge" style="background: var(--green); color: #fff;">VPA Approved</span>
                                        }
                                        else if (proposal.Status == "Reviewed")
                                        {
                                            <span class="badge" style="background: #17a2b8; color: #fff;">For Approval VPA</span>
                                        }
                                        else if (proposal.Status == "Pending")
                                        {
                                            <span class="badge" style="background: var(--orange); color: #fff;">For Approval @proposal.TargetOfficeRole</span>
                                        }
                                        else if (proposal.Status == "Rejected")
                                        {
                                            <span class="badge" style="background: var(--brown); color: #fff;">Returned</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">@proposal.Status</span>
                                        }
                                    </td>
                                    <td>@proposal.SubmittedAt.ToString("g")</td>
                                    <td>@proposal.TargetOfficeRole</td>
                                    <td>
                                        <div class="d-flex align-items-center gap-2">
                                            <a href="@Url.Action("DetailProposal", "EventProposals", new { id = proposal.EventProposalId })" class="btn btn-sm btn-custom"><i class="bi bi-eye me-1"></i> View</a>
                                            @if (proposal.Status == "Rejected")
                                            {
                                                <a href="@Url.Action("Resubmit", "EventProposals", new { id = proposal.EventProposalId })" class="btn btn-sm btn-warning"><i class="bi bi-arrow-repeat me-1"></i> Resubmit</a>
                                            }

                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
        else
        {
            <p>No proposals submitted yet for this event.</p>
        }

        <hr />

        <!-- Document Tracking Modal -->
        <div class="modal fade" id="trackingModal" tabindex="-1" aria-labelledby="trackingModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" style="max-width: 600px;">
                <div class="modal-content">
                    <div class="modal-header" style="background: var(--light-yellow); border-bottom: 2px solid var(--orange);">
                        <h5 class="modal-title" id="trackingModalLabel" style="color: var(--green); font-weight: 600;">
                            <i class="bi bi-file-earmark-check me-2"></i>Document Tracking
                        </h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body" style="max-height: 70vh; overflow-y: auto;">
                        @{
                            var allProposals = Model.Proposals?.ToList() ?? new List<EventSwift.Models.EventProposal>();
                            var trackingSteps = new List<dynamic>();
                            
                            // Add submission step only if documents exist
                            if (allProposals.Any())
                            {
                                var totalDocs = allProposals.Count;
                                var docList = string.Join(", ", allProposals.Take(3).Select(p => p.Title));
                                if (totalDocs > 3) { docList += $" and {totalDocs - 3} more"; }
                                
                                trackingSteps.Add(new { 
                                    Step = "Documents Submitted", 
                                    Status = "completed", 
                                    Icon = "bi-box-seam",
                                    Description = $"{totalDocs} document{(totalDocs > 1 ? "s" : "")} submitted: {docList}",
                                    Time = (DateTime?)allProposals.Min(p => p.SubmittedAt),
                                    Color = "success"
                                });
                            }
                            else
                            {
                                trackingSteps.Add(new { 
                                    Step = "Documents Submitted", 
                                    Status = "pending", 
                                    Icon = "bi-box-seam",
                                    Description = "No documents submitted yet. Click 'Submit Document' to start the approval process.",
                                    Time = (DateTime?)null,
                                    Color = "secondary"
                                });
                            }
                            
                            // Check VPAA status
                            var vpaaProposalsTracking = allProposals.Where(p => p.TargetOfficeRole == "VPAA").ToList();
                            var vpaaApprovals = vpaaProposalsTracking.SelectMany(p => p.Approvals).Where(a => a.Office == "VPAA").ToList();
                            bool vpaaReviewed = vpaaApprovals.Any() && vpaaApprovals.All(a => a.Status == "Approved");
                            bool vpaaRejected = vpaaApprovals.Any() && vpaaApprovals.Any(a => a.Status == "Rejected");
                            
                            if (vpaaProposalsTracking.Any())
                            {
                                var vpaaDocCount = vpaaProposalsTracking.Count;
                                var vpaaDocList = string.Join(", ", vpaaProposalsTracking.Take(2).Select(p => p.Title));
                                if (vpaaDocCount > 2) { vpaaDocList += $" and {vpaaDocCount - 2} more"; }
                                
                                trackingSteps.Add(new { 
                                    Step = "VPAA Review", 
                                    Status = vpaaRejected ? "rejected" : (vpaaReviewed ? "completed" : "in-progress"), 
                                    Icon = "bi-person-check",
                                    Description = vpaaRejected ? $"Returned by VPAA - {vpaaDocCount} document{(vpaaDocCount > 1 ? "s" : "")} need revision" : 
                                                   (vpaaReviewed ? $"Approved by VPAA - {vpaaDocCount} document{(vpaaDocCount > 1 ? "s" : "")} ready for VPA" : 
                                                   $"For Approval VPAA - {vpaaDocCount} document{(vpaaDocCount > 1 ? "s" : "")}: {vpaaDocList}"),
                                    Time = (DateTime?)null,
                                    Color = vpaaRejected ? "danger" : (vpaaReviewed ? "success" : "warning")
                                });
                                
                                // Add VPA review step for VPAA documents
                                if (vpaaReviewed && !vpaaRejected)
                                {
                                    // Check if VPA has approved these documents
                                    var vpaaVpaApprovals = vpaaProposalsTracking.SelectMany(p => p.Approvals).Where(a => a.Office == "VPA").ToList();
                                    bool vpaaVpaApproved = vpaaVpaApprovals.Any() && vpaaVpaApprovals.All(a => a.Status == "Approved");
                                    bool vpaaVpaRejected = vpaaVpaApprovals.Any() && vpaaVpaApprovals.Any(a => a.Status == "Rejected");
                                    
                                    trackingSteps.Add(new { 
                                        Step = "VPAA → VPA", 
                                        Status = vpaaVpaRejected ? "rejected" : (vpaaVpaApproved ? "completed" : "in-progress"), 
                                        Icon = "bi-arrow-right",
                                        Description = vpaaVpaRejected ? $"Returned by VPA - {vpaaDocCount} document{(vpaaDocCount > 1 ? "s" : "")} need revision" :
                                                       (vpaaVpaApproved ? $"Approved by VPA - {vpaaDocCount} document{(vpaaDocCount > 1 ? "s" : "")} ready for President" :
                                                       $"Forwarded to VPA - {vpaaDocCount} document{(vpaaDocCount > 1 ? "s" : "")} ready for final review"),
                                        Time = vpaaVpaApprovals.Any() ? vpaaVpaApprovals.Max(a => a.ActionDate) : null,
                                        Color = vpaaVpaRejected ? "danger" : (vpaaVpaApproved ? "success" : "info")
                                    });
                                }
                            }
                            
                            // Check VPF status
                            var vpfProposalsTracking = allProposals.Where(p => p.TargetOfficeRole == "VPF").ToList();
                            var vpfApprovals = vpfProposalsTracking.SelectMany(p => p.Approvals).Where(a => a.Office == "VPF").ToList();
                            bool vpfReviewed = vpfApprovals.Any() && vpfApprovals.All(a => a.Status == "Approved");
                            bool vpfRejected = vpfApprovals.Any() && vpfApprovals.Any(a => a.Status == "Rejected");
                            
                            if (vpfProposalsTracking.Any())
                            {
                                var vpfDocCount = vpfProposalsTracking.Count;
                                var vpfDocList = string.Join(", ", vpfProposalsTracking.Take(2).Select(p => p.Title));
                                if (vpfDocCount > 2) { vpfDocList += $" and {vpfDocCount - 2} more"; }
                                
                                trackingSteps.Add(new { 
                                    Step = "VPF Review", 
                                    Status = vpfRejected ? "rejected" : (vpfReviewed ? "completed" : "in-progress"), 
                                    Icon = "bi-person-check",
                                    Description = vpfRejected ? $"Returned by VPF - {vpfDocCount} document{(vpfDocCount > 1 ? "s" : "")} need revision" : 
                                                   (vpfReviewed ? $"Approved by VPF - {vpfDocCount} document{(vpfDocCount > 1 ? "s" : "")} ready for VPA" : 
                                                   $"For Approval VPF - {vpfDocCount} document{(vpfDocCount > 1 ? "s" : "")}: {vpfDocList}"),
                                    Time = (DateTime?)null,
                                    Color = vpfRejected ? "danger" : (vpfReviewed ? "success" : "warning")
                                });
                                
                                // Add VPA review step for VPF documents
                                if (vpfReviewed && !vpfRejected)
                                {
                                    // Check if VPA has approved these documents
                                    var vpfVpaApprovals = vpfProposalsTracking.SelectMany(p => p.Approvals).Where(a => a.Office == "VPA").ToList();
                                    bool vpfVpaApproved = vpfVpaApprovals.Any() && vpfVpaApprovals.All(a => a.Status == "Approved");
                                    bool vpfVpaRejected = vpfVpaApprovals.Any() && vpfVpaApprovals.Any(a => a.Status == "Rejected");
                                    
                                    trackingSteps.Add(new { 
                                        Step = "VPF → VPA", 
                                        Status = vpfVpaRejected ? "rejected" : (vpfVpaApproved ? "completed" : "in-progress"), 
                                        Icon = "bi-arrow-right",
                                        Description = vpfVpaRejected ? $"Returned by VPA - {vpfDocCount} document{(vpfDocCount > 1 ? "s" : "")} need revision" :
                                                       (vpfVpaApproved ? $"Approved by VPA - {vpfDocCount} document{(vpfDocCount > 1 ? "s" : "")} ready for President" :
                                                       $"Forwarded to VPA - {vpfDocCount} document{(vpfDocCount > 1 ? "s" : "")} ready for final review"),
                                        Time = vpfVpaApprovals.Any() ? vpfVpaApprovals.Max(a => a.ActionDate) : null,
                                        Color = vpfVpaRejected ? "danger" : (vpfVpaApproved ? "success" : "info")
                                    });
                                }
                            }
                            
                            // Check AMU status
                            var amuProposals = allProposals.Where(p => p.TargetOfficeRole == "AMU").ToList();
                            var amuApprovals = amuProposals.SelectMany(p => p.Approvals).Where(a => a.Office == "AMU").ToList();
                            bool amuReviewed = amuApprovals.Any() && amuApprovals.All(a => a.Status == "Approved");
                            bool amuRejected = amuApprovals.Any() && amuApprovals.Any(a => a.Status == "Rejected");
                            
                            if (amuProposals.Any())
                            {
                                var amuDocCount = amuProposals.Count;
                                var amuDocList = string.Join(", ", amuProposals.Take(2).Select(p => p.Title));
                                if (amuDocCount > 2) { amuDocList += $" and {amuDocCount - 2} more"; }
                                
                                trackingSteps.Add(new { 
                                    Step = "AMU Review", 
                                    Status = amuRejected ? "rejected" : (amuReviewed ? "completed" : "in-progress"), 
                                    Icon = "bi-person-check",
                                    Description = amuRejected ? $"Returned by AMU - {amuDocCount} document{(amuDocCount > 1 ? "s" : "")} need revision" : 
                                                   (amuReviewed ? $"Approved by AMU - {amuDocCount} document{(amuDocCount > 1 ? "s" : "")} ready for VPA" : 
                                                   $"For Approval AMU - {amuDocCount} document{(amuDocCount > 1 ? "s" : "")}: {amuDocList}"),
                                    Time = (DateTime?)null,
                                    Color = amuRejected ? "danger" : (amuReviewed ? "success" : "warning")
                                });
                                
                                // Add VPA review step for AMU documents
                                if (amuReviewed && !amuRejected)
                                {
                                    // Check if VPA has approved these documents
                                    var amuVpaApprovals = amuProposals.SelectMany(p => p.Approvals).Where(a => a.Office == "VPA").ToList();
                                    bool amuVpaApproved = amuVpaApprovals.Any() && amuVpaApprovals.All(a => a.Status == "Approved");
                                    bool amuVpaRejected = amuVpaApprovals.Any() && amuVpaApprovals.Any(a => a.Status == "Rejected");
                                    
                                    trackingSteps.Add(new { 
                                        Step = "AMU → VPA", 
                                        Status = amuVpaRejected ? "rejected" : (amuVpaApproved ? "completed" : "in-progress"), 
                                        Icon = "bi-arrow-right",
                                        Description = amuVpaRejected ? $"Returned by VPA - {amuDocCount} document{(amuDocCount > 1 ? "s" : "")} need revision" :
                                                       (amuVpaApproved ? $"Approved by VPA - {amuDocCount} document{(amuDocCount > 1 ? "s" : "")} ready for President" :
                                                       $"Forwarded to VPA - {amuDocCount} document{(amuDocCount > 1 ? "s" : "")} ready for final review"),
                                        Time = amuVpaApprovals.Any() ? amuVpaApprovals.Max(a => a.ActionDate) : null,
                                        Color = amuVpaRejected ? "danger" : (amuVpaApproved ? "success" : "info")
                                    });
                                }
                            }
                            
                            // Check VPA status
                            var allVpaApprovals = allProposals.SelectMany(p => p.Approvals).Where(a => a.Office == "VPA").ToList();
                            bool vpaApproved = allVpaApprovals.Any() && allVpaApprovals.All(a => a.Status == "Approved");
                            bool vpaRejected = allVpaApprovals.Any() && allVpaApprovals.Any(a => a.Status == "Rejected");
                            bool vpaPending = allVpaApprovals.Any() && allVpaApprovals.Any(a => a.Status == "Pending");
                            
                            // Calculate total documents under VPA review
                            var totalVpaDocs = allProposals.Count;
                            var vpaDirectDocs = allProposals.Where(p => p.TargetOfficeRole == "VPA").Count();
                            var vpaForwardedDocs = totalVpaDocs - vpaDirectDocs;
                            
                            var vpaDescription = "";
                            if (vpaRejected)
                            {
                                vpaDescription = $"Returned by VPA - {totalVpaDocs} document{(totalVpaDocs > 1 ? "s" : "")} need revision";
                            }
                            else if (vpaApproved)
                            {
                                vpaDescription = $"Approved by VPA - {totalVpaDocs} document{(totalVpaDocs > 1 ? "s" : "")} ready for President";
                            }
                            else
                            {
                                var docBreakdown = "";
                                if (vpaDirectDocs > 0 && vpaForwardedDocs > 0)
                                {
                                    docBreakdown = $" ({vpaDirectDocs} direct, {vpaForwardedDocs} forwarded)";
                                }
                                else if (vpaDirectDocs > 0)
                                {
                                    docBreakdown = $" ({vpaDirectDocs} direct)";
                                }
                                else if (vpaForwardedDocs > 0)
                                {
                                    docBreakdown = $" ({vpaForwardedDocs} forwarded)";
                                }
                                vpaDescription = $"For Approval VPA - {totalVpaDocs} document{(totalVpaDocs > 1 ? "s" : "")}{docBreakdown}";
                            }
                            
                            trackingSteps.Add(new { 
                                Step = "VPA Review", 
                                Status = vpaRejected ? "rejected" : (vpaApproved ? "completed" : "in-progress"), 
                                Icon = "bi-building-check",
                                Description = vpaDescription,
                                Time = allVpaApprovals.Any() ? allVpaApprovals.Max(a => a.ActionDate) : null,
                                Color = vpaRejected ? "danger" : (vpaApproved ? "success" : "warning")
                            });
                            
                            // Check President status
                            bool presidentApproved = Model.Status == "ApprovedByPresident";
                            bool sentToPresident = Model.Status == "SentToPresident";
                            
                            var presidentDescription = "";
                            if (presidentApproved)
                            {
                                presidentDescription = $"Approved by President - {totalVpaDocs} document{(totalVpaDocs > 1 ? "s" : "")} approved for event";
                            }
                            else if (sentToPresident)
                            {
                                presidentDescription = $"Sent to President - {totalVpaDocs} document{(totalVpaDocs > 1 ? "s" : "")} awaiting final approval";
                            }
                            else
                            {
                                presidentDescription = $"Waiting for VPA - All documents must be approved by VPA before sending to President";
                            }
                            
                            trackingSteps.Add(new { 
                                Step = "President Approval", 
                                Status = presidentApproved ? "completed" : (sentToPresident ? "in-progress" : "pending"), 
                                Icon = "bi-award",
                                Description = presidentDescription,
                                Time = (DateTime?)null,
                                Color = presidentApproved ? "success" : (sentToPresident ? "warning" : "secondary")
                            });
                        }
                        
                        <div class="logistics-timeline">
                            @for (int i = 0; i < trackingSteps.Count; i++)
                            {
                                var step = trackingSteps[i];
                                var isLast = i == trackingSteps.Count - 1;
                                var isCompleted = step.Status == "completed";
                                var isRejected = step.Status == "rejected";
                                var isInProgress = step.Status == "in-progress";
                                
                                <div class="logistics-step @step.Status">
                                    <div class="logistics-marker @step.Color">
                                        @if (isCompleted)
                                        {
                                            <i class="bi bi-check-circle-fill"></i>
                                        }
                                        else if (isRejected)
                                        {
                                            <i class="bi bi-x-circle-fill"></i>
                                        }
                                        else if (isInProgress)
                                        {
                                            <i class="bi bi-arrow-clockwise"></i>
                                        }
                                        else
                                        {
                                            <i class="bi @step.Icon"></i>
                                        }
                                    </div>
                                    <div class="logistics-content">
                                        <div class="logistics-header">
                                            <h6 class="mb-0" style="font-size: 0.9rem;">@step.Step</h6>
                                            <span class="logistics-status @step.Color" style="font-size: 0.75rem;">@step.Status.Replace("-", " ").ToUpper()</span>
                                        </div>
                                        <p class="logistics-description mb-0" style="font-size: 0.85rem;">@step.Description</p>
                                        @if (step.Time != null)
                                        {
                                            <small class="text-muted" style="font-size: 0.75rem;">
                                                <i class="bi bi-clock me-1"></i>@(((DateTime)step.Time).ToString("MMM dd, yyyy HH:mm"))
                                            </small>
                                        }
                                    </div>
                                    @if (!isLast)
                                    {
                                        <div class="logistics-line @(isCompleted ? "completed" : "")"></div>
                                    }
                                </div>
                            }
                        </div>
                        
                        <!-- Progress Summary -->
                        <div class="mt-3">
                            <div class="d-flex justify-content-between align-items-center mb-1">
                                <span class="fw-semibold" style="font-size: 0.85rem;">Overall Progress</span>
                                <span class="text-muted" style="font-size: 0.75rem;">@trackingSteps.Count(x => x.Status == "completed")/@trackingSteps.Count steps completed</span>
                            </div>
                            <div class="progress" style="height: 6px;">
                                @{
                                    var completedSteps = trackingSteps.Count(x => x.Status == "completed");
                                    var totalSteps = trackingSteps.Count;
                                    var progressPercentage = totalSteps > 0 ? (completedSteps * 100) / totalSteps : 0;
                                }
                                <div class="progress-bar bg-success" role="progressbar" style="width: @progressPercentage%" 
                                     aria-valuenow="@completedSteps" aria-valuemin="0" aria-valuemax="@totalSteps"></div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Button trigger modal -->
        <!-- Modal -->
        <div class="modal fade" id="createProposalModal" tabindex="-1" aria-labelledby="createProposalModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header" style="background-color: var(--green); color: white;">
                        <h5 class="modal-title" id="createProposalModalLabel">Submit New Document</h5>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    @using (Html.BeginForm("Create", "EventProposals", FormMethod.Post, new { enctype = "multipart/form-data" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.Hidden("eventId", Model.EventId)

                        <div class="modal-body">
                            <input type="hidden" name="Title" id="modalDocumentTitle" />

                            <div class="mb-3">
                                <label for="TargetOfficeRole" class="form-label">Send To</label>
                                @Html.DropDownList("targetOffice", new SelectList(new[] { "VPAA", "VPF", "AMU", "VPA" }), "Select Office", new { @class = "form-control", required = "required" })
                                <small class="form-text text-muted">Documents sent to VPAA/VPF/AMU will be automatically forwarded to VPA after approval. VPA documents go directly to VPA.</small>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Insert a File</label>
                                <div class="custom-file-input">
                                    <input type="file" name="uploadedFile" id="uploadedFile" class="form-control" accept=".pdf" required style="display: none;" />
                                    <button type="button" class="btn btn-outline-secondary" onclick="document.getElementById('uploadedFile').click();">
                                        <i class="bi bi-file-earmark-arrow-up me-2"></i>Insert a File
                                    </button>
                                    <span id="file-name" class="ms-2 text-muted"></span>
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="submit" class="btn btn-success">Submit Proposal</button>
                        </div>
                    }
                </div>
            </div>
        </div>



        @section Scripts {
            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
            <script>
                // Show toast if present
                document.addEventListener('DOMContentLoaded', function() {
                    var toastEl = document.getElementById('feedbackToast');
                    if (toastEl) {
                        var toast = new bootstrap.Toast(toastEl, { delay: 2000 });
                        toast.show();
                    }
                    
                    // Custom file input handling
                    var fileInput = document.getElementById('uploadedFile');
                    var fileNameSpan = document.getElementById('file-name');
                    var modalDocumentTitleInput = document.getElementById('modalDocumentTitle');
                    
                    if (fileInput) {
                        fileInput.addEventListener('change', function() {
                            if (this.files.length > 0) {
                                var file = this.files[0];
                                var fileName = file.name;
                                var fileExtension = fileName.split('.').pop().toLowerCase();
                                
                                // Check if file is PDF
                                if (fileExtension !== 'pdf') {
                                    alert('Only PDF files are allowed. Please select a PDF file.');
                                    this.value = ''; // Clear the file input
                                    fileNameSpan.textContent = '';
                                    modalDocumentTitleInput.value = '';
                                    return;
                                }
                                
                                fileNameSpan.textContent = fileName;
                                
                                // Extract title from filename (remove extension)
                                var title = fileName.replace(/\.[^/.]+$/, ""); // Remove file extension
                                modalDocumentTitleInput.value = title;
                            } else {
                                fileNameSpan.textContent = '';
                                modalDocumentTitleInput.value = '';
                            }
                        });
                    }
                });
            </script>
            <script>
                var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
                tooltipTriggerList.map(function (tooltipTriggerEl) {
                    return new bootstrap.Tooltip(tooltipTriggerEl);
                });
            </script>
        }
    </div>
</div>
