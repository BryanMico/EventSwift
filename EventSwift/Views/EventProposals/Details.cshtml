@model EventSwift.Models.Event

@{
    ViewBag.Title = "Event Details";
    ViewBag.SkipNavbar = true;

    // Aggregate all approvals for all proposals under this event
    var allApprovals = Model.Proposals?.SelectMany(p => p.Approvals ?? new List<EventSwift.Models.ProposalApproval>()).ToList() ?? new List<EventSwift.Models.ProposalApproval>();

    // For each office, all proposals sent to that office must be approved
    var vpaaProposals = Model.Proposals.Where(p => p.TargetOfficeRole == "VPAA").ToList();
    var vpfProposals = Model.Proposals.Where(p => p.TargetOfficeRole == "VPF").ToList();
    var amiProposals = Model.Proposals.Where(p => p.TargetOfficeRole == "AMI").ToList();
    var vpaProposals = Model.Proposals.Where(p => p.TargetOfficeRole == "VPA").ToList();
    bool allVPAAApproved = vpaaProposals.Any() && vpaaProposals.All(p => p.Approvals.Any(a => a.Office == "VPAA" && a.Status == "Approved"));
    bool allVPFApproved = vpfProposals.Any() && vpfProposals.All(p => p.Approvals.Any(a => a.Office == "VPF" && a.Status == "Approved"));
    bool allAMIApproved = amiProposals.Any() && amiProposals.All(p => p.Approvals.Any(a => a.Office == "AMI" && a.Status == "Approved"));
    bool allVPAApproved = vpaProposals.Any() && vpaProposals.All(p => p.Approvals.Any(a => a.Office == "VPA" && a.Status == "Approved"));
    bool canSendToPresident = allVPAAApproved && allVPFApproved && allAMIApproved && allVPAApproved;
}

<div class="d-flex">
    @Html.Partial("~/Views/Shared/_Sidebar.cshtml")

    <div class="flex-grow-1 p-2">
        @Html.Partial("~/Views/Shared/_Navbar.cshtml")

        <!-- Alerts at the top -->
        @if (TempData["Error"] != null)
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert" id="autoDismissAlert">
                @TempData["Error"]
            </div>
        }
        @if (TempData["Success"] != null)
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert" id="autoDismissAlert">
                @TempData["Success"]
            </div>
        }

        <h2 class="mb-4" style="color: var(--green);">Event: @Model.Title</h2>

        <div class="d-flex justify-content-between mb-3">
            <p>Status: @Model.Status</p>

            <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#createProposalModal">
                + Create Proposal
            </button>
        </div>

        <hr />

        <h4>Proposals</h4>

        @if (Model.Proposals != null && Model.Proposals.Any())
        {
            <table class="table table-bordered table-sm">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Status</th>
                        <th>Submitted At</th>
                        <th>Target Office</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var proposal in Model.Proposals)
                    {
                        <tr>
                            <td>@proposal.Title</td>
                            <td>@proposal.Status</td>
                            <td>@proposal.SubmittedAt.ToString("g")</td>
                            <td>@proposal.TargetOfficeRole</td>
                            <td>
                                <div class="d-flex">
                                    @Html.ActionLink("Details", "DetailProposal", "EventProposals", new { id = proposal.EventProposalId }, new { @class = "btn btn-sm btn-primary me-1" })
                                    @if (proposal.Status == "Rejected")
                                    {
                                        @Html.ActionLink("Resubmit", "Resubmit", "EventProposals", new { id = proposal.EventProposalId }, new { @class = "btn btn-sm btn-warning me-1" })
                                    }
                                    @if ((proposal.Status == "Pending" || proposal.Status == "Resubmitted") && !proposal.HasFollowedUp)
                                    {
                                        @Html.ActionLink("Follow Up", "FollowUp", "EventProposals", new { id = proposal.EventProposalId }, new { @class = "btn btn-sm btn-info me-1" })
                                    }
                                    else if ((proposal.Status == "Pending" || proposal.Status == "Resubmitted") && proposal.HasFollowedUp)
                                    {
                                        <button class="btn btn-sm btn-info me-1" disabled>Follow Up (Used)</button>
                                    }
                                    @using (Html.BeginForm("Delete", "EventProposals", FormMethod.Post, new { onsubmit = "return confirm('Are you sure you want to delete this proposal?');" }))
                                    {
                                        @Html.AntiForgeryToken()
                                        @Html.Hidden("id", proposal.EventProposalId)
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>No proposals submitted yet for this event.</p>
        }

        <hr />

        <div>
            <h4>Event Approval Status</h4>
            <p>
                VPAA All Approved: @Html.Raw(allVPAAApproved ? "<span class=\"text-success\">Yes</span>" : "<span class=\"text-danger\">No</span>") |
                VPF All Approved: @Html.Raw(allVPFApproved ? "<span class=\"text-success\">Yes</span>" : "<span class=\"text-danger\">No</span>") |
                AMI All Approved: @Html.Raw(allAMIApproved ? "<span class=\"text-success\">Yes</span>" : "<span class=\"text-danger\">No</span>") |
                VPA All Approved: @Html.Raw(allVPAApproved ? "<span class=\"text-success\">Yes</span>" : "<span class=\"text-danger\">No</span>")
            </p>
            @if (Model.Status == "SentToPresident")
            {
                <form asp-action="ApproveEvent" method="post">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="eventId" value="@Model.EventId" />
                    <button type="submit" class="btn btn-success">President Approve Event</button>
                </form>
            }
            else if (Model.Status == "ApprovedByPresident")
            {
                <span class="badge bg-success">Approved by President</span>

            }
            else
            {
                using (Html.BeginForm("SendToPresident", "EventProposals", FormMethod.Post, new { onsubmit = "return confirm('Are you sure you want to send this event to the President?');" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.Hidden("eventId", Model.EventId)
                    <button type="submit" class="btn btn-warning">Send to President</button>
                }
            }
        </div>

        <hr />

        <!-- Button trigger modal -->
        <!-- Modal -->
        <div class="modal fade" id="createProposalModal" tabindex="-1" aria-labelledby="createProposalModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header" style="background-color: var(--green); color: white;">
                        <h5 class="modal-title" id="createProposalModalLabel">Submit New Proposal</h5>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    @using (Html.BeginForm("Create", "EventProposals", FormMethod.Post, new { enctype = "multipart/form-data" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.Hidden("eventId", Model.EventId)

                        <div class="modal-body">
                            <div class="mb-3">
                                <label for="Title" class="form-label">Proposal Title</label>
                                <input type="text" name="Title" class="form-control" required />
                            </div>

                            <div class="mb-3">
                                <label for="TargetOfficeRole" class="form-label">Send To</label>
                                @Html.DropDownList("targetOffice", new SelectList(new[] { "VPAA", "VPF", "AMI", "VPA" }), "Select Office", new { @class = "form-control", required = "required" })
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Select File</label>
                                <input type="file" name="uploadedFile" class="form-control" required />
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="submit" class="btn btn-success">Submit Proposal</button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        setTimeout(function() {
            var alert = document.getElementById('autoDismissAlert');
            if (alert) {
                var bsAlert = new bootstrap.Alert(alert);
                bsAlert.close();
            }
        }, 2000);
    </script>
}
