@model EventSwift.Models.ProposalApproval

@{
    ViewBag.Title = "Approval Details";
    ViewBag.SkipNavbar = true;

    var fileName = System.IO.Path.GetFileName(Model.EventProposal.FilePath);
    var fileExt = System.IO.Path.GetExtension(fileName)?.ToLower();
    
    // Get current user role directly from database
    var currentUserRole = "";
    if (User.Identity.IsAuthenticated)
    {
        using (var db = new EventSwift.Models.DefaultConnection())
        {
            var user = db.Users.FirstOrDefault(u => u.Username == User.Identity.Name);
            currentUserRole = user?.Role ?? "";
        }
    }
    var isVPA = currentUserRole == "VPA";
}

<div class="d-flex">
    @Html.Partial("~/Views/Shared/_Sidebar.cshtml")

    <div class="flex-grow-1 p-4">
        @Html.Partial("~/Views/Shared/_Navbar.cshtml")

        <!-- Section Header -->
        <div class="d-flex align-items-center mb-4">
            <div class="border-start border-3 ps-3 me-3" style="border-left-color: var(--green) !important;">
                <h2 class="mb-0" style="color: var(--green); font-weight: 600;">
                    <i class="bi bi-file-earmark-check me-2"></i>Approval Details
                </h2>
                <small class="text-muted">Review and take action on this document</small>
            </div>
        </div>

        <div class="d-flex justify-content-end mb-4">
            <a href="@Url.Action("ApprovalsIndex")" class="btn btn-outline-custom">
                <i class="bi bi-arrow-left me-2"></i>Back to Events
            </a>
        </div>

        <div class="row g-4">
            <!-- Proposal Details Card -->
            <div class="col-lg-6">
                <div class="card shadow-sm border-0 mb-4">
                    <div class="card-header" style="background: var(--light-yellow); border-bottom: 2px solid var(--orange);">
                        <h5 class="mb-0" style="color: var(--green); font-weight: 600;">
                            <i class="bi bi-info-circle me-2"></i>Document Information
                        </h5>
                    </div>
                    <div class="card-body">
                        <dl class="row mb-0">
                            <dt class="col-sm-5">Document Title</dt>
                            <dd class="col-sm-7 fw-semibold">@Model.EventProposal.Title</dd>
                            <dt class="col-sm-5">Document Status</dt>
                            <dd class="col-sm-7">
                                @if (Model.EventProposal.Status == "Approved")
                                {
                                    <span class="badge" style="background: var(--green); color: #fff;">VPA Approved</span>
                                }
                                else if (Model.EventProposal.Status == "Reviewed")
                                {
                                    <span class="badge" style="background: #17a2b8; color: #fff;">For Approval VPA</span>
                                }
                                else if (Model.EventProposal.Status == "Pending")
                                {
                                    <span class="badge" style="background: var(--orange); color: #fff;">For Approval @Model.EventProposal.TargetOfficeRole</span>
                                }
                                else if (Model.EventProposal.Status == "Rejected")
                                {
                                    <span class="badge" style="background: var(--brown); color: #fff;">Returned</span>
                                }
                                else
                                {
                                    <span class="badge bg-secondary">@Model.EventProposal.Status</span>
                                }
                            </dd>
                            <dt class="col-sm-5">Submitted At</dt>
                            <dd class="col-sm-7">@Model.EventProposal.SubmittedAt.ToString("g")</dd>
                            <dt class="col-sm-5">Approval Office</dt>
                            <dd class="col-sm-7">@Model.Office</dd>
                            <dt class="col-sm-5">Approval Status</dt>
                            <dd class="col-sm-7">
                                @if (Model.Status == "Approved")
                                {
                                    <span class="badge" style="background: var(--green); color: #fff;">Approved</span>
                                }
                                else if (Model.Status == "Pending")
                                {
                                    <span class="badge" style="background: var(--orange); color: #fff;">For Approval @Model.Office</span>
                                }
                                else if (Model.Status == "Rejected")
                                {
                                    <span class="badge" style="background: var(--brown); color: #fff;">Returned</span>
                                }
                                else
                                {
                                    <span class="badge bg-secondary">@Model.Status</span>
                                }
                            </dd>
                            @if (Model.Office == "VPA" && Model.ActionDate.HasValue)
                            {
                                <dt class="col-sm-5">Action Date</dt>
                                <dd class="col-sm-7">@Model.ActionDate.Value.ToString("g")</dd>
                            }
                            <dt class="col-sm-5">Document File</dt>
                            <dd class="col-sm-7">
                                <a href="@Url.Content(Model.EventProposal.FilePath)" target="_blank" class="btn btn-sm btn-outline-custom me-2 mb-1"><i class="bi bi-eye"></i> View</a>
                                <a href="@Url.Content(Model.EventProposal.FilePath)" download class="btn btn-sm btn-outline-custom mb-1"><i class="bi bi-download"></i> Download</a>
                            </dd>
                        </dl>
                    </div>
                </div>

                <!-- Approve/Return Form -->
                @if (Model.Status == "Pending" || Model.Status == "Resubmitted")
                {
                    <div class="card shadow-sm border-0 mb-4">
                        <div class="card-header" style="background: var(--light-yellow); border-bottom: 2px solid var(--orange);">
                            <h5 class="mb-0" style="color: var(--green); font-weight: 600;">
                                <i class="bi bi-check2-square me-2"></i>Approve/Return
                            </h5>
                        </div>
                        <div class="card-body">
                            @if (Model.Office == "VPA" && Model.EventProposal.TargetOfficeRole == "VPA")
                            {
                                <div class="alert alert-info mb-3">
                                    <i class="bi bi-info-circle me-1"></i>
                                    <strong>VPA Approval:</strong> You must select an event date and time when approving this document.
                                </div>
                                
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <label for="modalEventDate" class="form-label">Event Date:</label>
                                        <input type="date" class="form-control" id="modalEventDate" name="eventDate" value="@DateTime.Now.ToString("yyyy-MM-dd")" required />
                                    </div>
                                    <div class="col-md-6">
                                        <label for="modalEventTime" class="form-label">Event Time:</label>
                                        <input type="time" class="form-control" id="modalEventTime" name="eventTime" value="09:00" required />
                                    </div>
                                </div>
                            }

                            @using (Html.BeginForm("Action", "ProposalApprovals", FormMethod.Post, new { enctype = "multipart/form-data", id = "approvalForm" }))
                            {
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="id" value="@Model.ProposalApprovalId" />
                                <input type="hidden" name="eventDate" id="selectedEventDate" value="" />
                                <input type="hidden" name="signatureData" id="signatureData" />
                                <input type="hidden" name="approvalPassword" id="approvalPasswordHidden" />
                                <input type="hidden" name="action" id="actionHidden" value="Approve" />

                                <div class="form-check mb-3">
                                    <input class="form-check-input" type="checkbox" value="" id="rejectToggle" />
                                    <label class="form-check-label" for="rejectToggle">
                                        I want to return this document and provide feedback
                                    </label>
                                </div>

                                <div class="mb-3" id="feedbackContainer" style="display:none;">
                                    <label for="feedbackMessage" class="form-label">Feedback for return:</label>
                                    <textarea class="form-control" id="feedbackMessage" name="feedbackMessage" rows="4"></textarea>
                                    @Html.ValidationMessage("feedbackMessage", "", new { @class = "text-danger" })
                                </div>

                                <button type="button" id="approveBtn" class="btn btn-success me-2">
                                    <i class="bi bi-check-circle me-1"></i>Approve
                                </button>
                                <button type="button" id="rejectBtn" class="btn btn-danger"><i class="bi bi-x-circle me-1"></i>Return</button>
                                @Html.ActionLink("Cancel", "ApprovalsIndex", null, new { @class = "btn btn-outline-custom ms-2" })
                            }
                        </div>
                    </div>
                }
            </div>

            <!-- File Preview Card -->
            <div class="col-lg-6">
                <div class="card shadow-sm border-0 mb-4">
                    <div class="card-header" style="background: var(--light-yellow); border-bottom: 2px solid var(--orange);">
                        <h5 class="mb-0" style="color: var(--green); font-weight: 600;">
                            <i class="bi bi-file-earmark-text me-2"></i>File Preview
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (fileExt == ".txt")
                        {
                            string fullPath = Server.MapPath(Model.EventProposal.FilePath);
                            string fileContent = System.IO.File.Exists(fullPath) ? System.IO.File.ReadAllText(fullPath) : "File not found.";
                            <pre style="background-color:#f8f9fa; border: 1px solid #ddd; padding: 10px; max-height: 500px; overflow-y: auto;">@fileContent</pre>
                        }
                        else if (fileExt == ".doc" || fileExt == ".docx")
                        {
                            <p>Preview not available for Word documents.</p>
                            <a href="@Url.Content(Model.EventProposal.FilePath)" class="btn btn-primary mb-3" target="_blank">Download @fileName</a>
                            <hr />
                            <p>Or view online via Google Docs:</p>
                            <iframe src="https://docs.google.com/gview?url=@(Request.Url.GetLeftPart(UriPartial.Authority) + Url.Content(Model.EventProposal.FilePath))&embedded=true"
                                    style="width:100%; height:500px;" frameborder="0">
                                Your browser does not support iframes.
                            </iframe>
                        }
                        else if (fileExt == ".pdf")
                        {
                            <iframe src="@Url.Content(Model.EventProposal.FilePath)" style="width: 100%; height: 500px;" frameborder="0">
                                This browser does not support PDFs. Please download the file to view it:
                                <a href="@Url.Content(Model.EventProposal.FilePath)">Download file</a>.
                            </iframe>
                        }
                        else
                        {
                            <p>No file uploaded or preview not available.</p>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



<!-- Approval Modal for Password and E-Signature -->
<div class="modal fade" id="approveModal" tabindex="-1" aria-labelledby="approveModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="approveModalLabel">Confirm Approval</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body d-flex">
        <!-- Password input -->
        <div class="flex-fill me-4">
          <label for="approvalPasswordInput" class="form-label">Enter your password:</label>
          <input type="password" class="form-control" id="approvalPasswordInput" required>
        </div>
        <!-- Signature pad -->
        <div class="flex-fill">
          <label class="form-label">E-Signature:</label>
          <canvas id="signaturePad" style="border:1px solid #ccc; width:100%; height:150px;"></canvas>
          <button type="button" class="btn btn-sm btn-secondary mt-2" id="clearSignature">Clear</button>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-success" id="confirmApprovalBtn">Confirm Approval</button>
      </div>
    </div>
  </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/signature_pad@4.1.6/dist/signature_pad.umd.min.js"></script>
    <script>
        const rejectToggle = document.getElementById('rejectToggle');
        const feedbackContainer = document.getElementById('feedbackContainer');
        const feedbackMessage = document.getElementById('feedbackMessage');
        const rejectBtn = document.getElementById('rejectBtn');
        const approveBtn = document.getElementById('approveBtn');
        const selectedEventDate = document.getElementById('selectedEventDate');
        const modalEventDate = document.getElementById('modalEventDate');
        const modalEventTime = document.getElementById('modalEventTime');
        const isVPAOffice = @(Model.Office == "VPA" && Model.EventProposal.TargetOfficeRole == "VPA" ? "true" : "false");

        if (rejectToggle) {
            rejectToggle.addEventListener('change', function () {
                if (this.checked) {
                    feedbackContainer.style.display = 'block';
                } else {
                    feedbackContainer.style.display = 'none';
                    feedbackMessage.value = '';
                }
            });
        }
        if (rejectBtn) {
            rejectBtn.addEventListener('click', function (e) {
                if (!rejectToggle.checked) {
                    e.preventDefault();
                    alert('Please check "I want to return" to provide feedback.');
                    return;
                }
                if (feedbackMessage.value.trim() === '') {
                    e.preventDefault();
                    alert('Please provide feedback when returning.');
                    feedbackMessage.focus();
                    return;
                }
                
                // Set the action to Return and submit the form
                document.getElementById('actionHidden').value = 'Reject';
                document.getElementById('approvalForm').submit();
            });
        }

        // Handle approve button click
        if (approveBtn) {
            approveBtn.addEventListener('click', function (e) {
                if (isVPAOffice) {
                    // For VPA office, validate date and time first
                    if (!modalEventDate.value) {
                        alert('Please select an event date before approving.');
                        modalEventDate.focus();
                        return;
                    }
                    if (!modalEventTime.value) {
                        alert('Please select an event time before approving.');
                        modalEventTime.focus();
                        return;
                    }
                    
                    // Combine date and time and set in hidden field
                    const dateTimeValue = modalEventDate.value + 'T' + modalEventTime.value;
                    selectedEventDate.value = dateTimeValue;
                    
                    // Show approval modal for password and signature
                    const approveModal = new bootstrap.Modal(document.getElementById('approveModal'));
                    approveModal.show();
                } else {
                    // For non-VPA office, show approval modal directly
                    const approveModal = new bootstrap.Modal(document.getElementById('approveModal'));
                    approveModal.show();
                }
            });
        }

        // Signature Pad logic
        let signaturePad;
        document.addEventListener('DOMContentLoaded', function () {
            const canvas = document.getElementById('signaturePad');
            if (canvas) {
                signaturePad = new SignaturePad(canvas);
                document.getElementById('clearSignature').onclick = () => signaturePad.clear();
            }
        });

        // Approval Modal logic
        document.getElementById('confirmApprovalBtn').addEventListener('click', function () {
            const passwordInput = document.getElementById('approvalPasswordInput');
            if (!passwordInput.value) {
                alert('Please enter your password.');
                passwordInput.focus();
                return;
            }
            if (!signaturePad || signaturePad.isEmpty()) {
                alert('Please provide your e-signature.');
                return;
            }
            // Set hidden fields in the form
            document.getElementById('approvalPasswordHidden').value = passwordInput.value;
            document.getElementById('signatureData').value = signaturePad.toDataURL();
            document.getElementById('actionHidden').value = 'Approve'; // Always set action to Approve
            // Submit the form
            document.getElementById('approvalForm').submit();
        });


    </script>
}
